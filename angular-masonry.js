// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  angular.module("masonryLayout", []).directive("masonry", [
    "$window", "$rootScope", function($window, $rootScope) {
      var Wall;
      Wall = (function() {
        function Wall(marginX, marginY, imgWidth) {
          this.IMG_WIDTH = imgWidth || 0;
          this.IMG_MARGIN_X = marginX || 0;
          this.IMG_MARGIN_Y = marginY || 0;
          this.imagesLoadCount = 0;
          this.totalItemCount = 0;
          this.resizing = false;
          this.windowWidth = $window.innerWidth;
          this.containers;
          this.containerWidth;
          this.marginWidth;
        }

        Wall.prototype.docHeight = function() {
          return $window.innerHeight * 2.5;
        };

        Wall.prototype.reset = function($element) {
          var columns, container, i, _i, _len, _ref, _results;
          this.checkImgWidth($element[0].children[0].offsetWidth);
          document.body.style.overflow = "scroll";
          this.containerWidth = $element[0].clientWidth;
          document.body.style.overflow = "auto";
          columns = Math.floor((this.containerWidth + this.IMG_MARGIN_X) / (this.IMG_WIDTH + this.IMG_MARGIN_X));
          this.marginWidth = Math.abs((this.containerWidth - this.IMG_WIDTH * columns - this.IMG_MARGIN_X * (columns - 1)) / 2);
          this.containers = new Array(columns);
          _ref = this.containers;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            container = _ref[i];
            _results.push(this.containers[i] = 0);
          }
          return _results;
        };

        Wall.prototype.checkImgWidth = function(firstElWidth) {
          if (!(this.IMG_WIDTH > 0) && firstElWidth > 0) {
            return this.IMG_WIDTH = firstElWidth;
          }
        };

        Wall.prototype.setWindowWidth = function() {
          return this.windowWidth = $window.innerWidth;
        };

        Wall.prototype.shortest = function() {
          return this.containers.indexOf(this.containers.slice().sort(function(a, b) {
            return a - b;
          })[0]);
        };

        Wall.prototype.shouldResize = function() {
          if ((Math.abs(this.windowWidth - $window.innerWidth) > 10) && !this.resizing) {
            return true;
          } else {
            return false;
          }
        };

        Wall.prototype.tallest = function() {
          return this.containers.slice().sort(function(a, b) {
            return b - a;
          })[0];
        };

        Wall.prototype.update = function(column, height) {
          return this.containers[column] += height;
        };

        return Wall;

      })();
      return {
        restrict: "A",
        link: function(scope, element, attrs, ctrl) {
          var attachListener, fixBrick, homeColumn, newLeft, newTop, repaint, setNewCoordinates, wall;
          wall = new Wall(+attrs.xMargin, +attrs.yMargin, +attrs.imgWidth);
          homeColumn = void 0;
          newLeft = void 0;
          newTop = void 0;
          setNewCoordinates = function() {
            homeColumn = wall.shortest();
            newLeft = homeColumn * (wall.IMG_WIDTH + wall.IMG_MARGIN_X) + wall.marginWidth;
            return newTop = wall.containers[homeColumn];
          };
          repaint = function() {
            var container, imageContainers, _i, _len;
            if (wall.shouldResize()) {
              imageContainers = element[0].children;
              wall.resizing = true;
              wall.setWindowWidth();
              wall.reset(element);
              for (_i = 0, _len = imageContainers.length; _i < _len; _i++) {
                container = imageContainers[_i];
                setNewCoordinates();
                container.style.cssText += "; left: " + newLeft + "px; top: " + newTop + "px;";
                wall.update(homeColumn, container.scrollHeight + wall.IMG_MARGIN_Y);
              }
              element[0].style.height = wall.tallest() + "px";
              return wall.resizing = false;
            }
          };
          fixBrick = function(brick) {
            setNewCoordinates();
            brick.style.cssText += "; left: " + newLeft + "px; top: " + newTop + "px;";
            wall.update(homeColumn, brick.scrollHeight + wall.IMG_MARGIN_Y);
            if (++wall.imagesLoadCount === wall.totalItemCount) {
              return element[0].style.height = wall.tallest() + "px";
            }
          };
          attachListener = function(brick) {
            var imgElem;
            brick.style.cssText += "; left: -999px; top: -999px; position:absolute; ";
            imgElem = brick.getElementsByTagName("img")[0];
            if (imgElem != null) {
              imgElem.addEventListener("load", function() {
                return fixBrick(brick);
              });
              return imgElem.addEventListener("error", function() {
                return fixBrick(brick);
              });
            } else {
              return fixBrick(brick);
            }
          };
          scope.$watch(function() {
            return element[0].children.length;
          }, function(newCount, oldCount) {
            var i, _results;
            if (newCount === oldCount) {
              return;
            }
            if (oldCount === 0) {
              element[0].style.height = 0;
              wall.totalItemCount = 0;
              wall.imagesLoadCount = 0;
              wall.reset(element);
            }
            wall.totalItemCount = newCount;
            element[0].style.height = wall.tallest() + (wall.docHeight()) + "px";
            i = oldCount;
            _results = [];
            while (i < newCount) {
              attachListener(element[0].children[i]);
              _results.push(i++);
            }
            return _results;
          });
          angular.element($window).on("resize", repaint);
          scope.$on("$destroy", function() {
            return angular.element($window).off("resize", repaint);
          });
          return element[0].style.position = "relative";
        }
      };
    }
  ]);

}).call(this);
